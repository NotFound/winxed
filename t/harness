#! winxed
// harness for winxed tests
// TAP parsing adapted from nqp in plumage harness

$load 'Getopt/Obj.pbc';

function debugmsg(string s)
{
    if (0)
        say(s);
}

function run_test(string filename, int debug, string stage)
{
    // If stage is not specified, assume a winxed driver is in PATH
    // and use it.
    // If specified, assume we are in the build tree and use the
    // non installed driver to select stage.
    string s= stage == "" ?
        'winxed' :
        'parrot winxedrun.pbc --stage=' + stage;
    if (debug)
        s = s + " --debug";
    s = s + ' ' + filename;
    debugmsg(s);

    var fh= open(s, 'rp');
    fh.encoding("utf8");
    string test_output= fh.readall();
    fh.close();
    return split("\n", test_output);
}

function max_length(var args)
{
    int l= 0;
    for (string filename in args) {
        int i = length(filename);
        if (i > l)
            l= i;
    }
    return l;
}

function run_test_list(var args, int verbose, string stage, int debug)
{
    int total_passed= 0;
    int total_failed= 0;
    int total_files= 0;
    int failed_files= 0;

    int l= max_length(args) + 2;
    for (string filename in args) {
        print(filename, '.' * (l - length(filename)));
        total_files = total_files + 1;
        int passed= 0;
        int failed= 0;
        int curr_test= 0;
        int num_tests = -1;
        var output= run_test(filename, debug, stage);

        var plan_part0;
        var plan_part1;
        {
            var plan_parts= split('..', output[0]);
            plan_part0 = plan_parts[0];
            plan_part1 = plan_parts[1];
        }
        if (plan_part0.is_integer(plan_part0)) {
            num_tests = plan_part1;
            output.shift();
            if (verbose)
                say(1 , '..', num_tests);
        }

        for (string line in output) {
            debugmsg(line);
            if (line != '') {
                if (verbose)
                    say(line);
                if (num_tests < 0) {
                    var plan_parts= split('..', line);
                    var p0 = plan_parts[0];
                    if (p0.is_integer(p0)) {
                        plan_part0 = plan_parts[0];
                        plan_part1 = plan_parts[1];
                        num_tests = plan_part1;
                        if (verbose)
                            say(1 , '..', num_tests);
                    }
                }
                var line_parts = split('ok ', line);
                int test_number= line_parts[1];
                debugmsg(test_number);
                string part= line_parts[0];
                debugmsg(part);
                if (part == 'not ') {
                    failed = failed + 1;
                    curr_test = curr_test + 1;
                }
                else if (test_number == (curr_test + 1)) {
                    passed = passed + 1;
                    curr_test = curr_test + 1;
                }
            }
        }
        if (failed)
            say('failed ', failed, '/', num_tests, ' tests');
        else if (plan_part0 != 1 || (num_tests < 0)) {
            say('INVALID PLAN: ', plan_part0, '..', plan_part1);
            failed_files = failed_files + 1;
        }
        else
            say('passed ', curr_test, ' tests');

        total_passed= total_passed + passed;
        total_failed= total_failed + failed;
        if (num_tests != curr_test) {
            say('Planned to run ', num_tests, ' tests but ran ', curr_test, ' tests');
            say('FAILED');
        }
    }
    if (total_failed) {
        int total= total_passed + total_failed;
        say('FAILED ', total_failed, '/', total);
    }
    else if (failed_files)
        say('FAILED ', failed_files, ' files, PASSED ', total_passed, ' tests');
    else
        say('PASSED ', total_passed, ' tests in ', total_files, ' files');
}

// Use the OS pmc for file operations.
function getOS()
{
    var os;
    try {
        loadlib('os');
        os = new ['OS'];
    }
    catch() { }
    return os;
}

function add_file(var result, string path)
{
    // Add a file to result list only if it has a .t extension.
    if (length(path) > 2 && substr(path, -2) == '.t')
            result.push(path);
}

function build_from_dir(var result, string path, int recursive)
{
    // Read the directory and store the directories and the
    // test files it contains.
    var filepaths = [];
    var dirpaths = [];
    var os = getOS();
    int l = length(path);
    if (substr(path, l - 1, 1) == '/')
        path = substr(path, 0, l - 1);
    var dir = os.readdir(path);
    for (string dirent in dir)
        if ((dirent != '.') && (dirent != '..')) {
            string newpath = (path == '.') ? dirent : path + '/' + dirent;
            var st= os.stat(newpath);
            int mode = st[2];
            if ((mode & 16384) != 0)
                dirpaths.push(newpath);
            else
                filepaths.push(newpath);
        }

    // First sort the directories and add to result
    dirpaths.sort();
    for (string dirpath in dirpaths)
        build_from_dir(result, dirpath, recursive);

    // Then sort the files and add to result
    filepaths.sort();
    for (string filepath in filepaths)
        add_file(result, filepath);
}

function build_file_list(var result, var args, int recursive)
{
    var os = getOS();
    for (string path in args) {
        var st= os.stat(path);
        int mode = st[2];
        if ((mode & 16384) && recursive)
            var newlist= build_from_dir(result, path, recursive);
        else
            result.push(path);
        
    }
}

function main(var argv)
{
    var getopts = new ['Getopt','Obj'];
    getopts.notOptStop(1);
    getopts.push_string('v');
    getopts.push_string('r');
    getopts.push_string('stage=s');
    getopts.push_string('debug');

    argv.shift();
    var opts = getopts.get_options(argv);
    var optverbose = opts['v'];
    var optrecursive = opts['r'];
    var optdebug = opts['debug'];
    int verbose = optverbose == null ? 0 : int(optverbose);
    int recursive = optrecursive == null ? 0 : int(optrecursive);
    int debug = optdebug != null;
    var opt_stage = opts['stage'];
    string stage = "";
    if (opt_stage != null)
        stage = opt_stage;

    int argc= argv;
    if (argc == 0)
        argv.push('.');

    string args[];
    build_file_list(args, argv, recursive);

    run_test_list(args, verbose, stage, debug);
}

// End
