#! winxed
// fly.winxed
// Open your eyes and spread your wings.

//**********************************************************************

// Operating systems access via NCI, used by the detach option
// Fail cleanly if the platform lacks support.

function fork()
{
    var dl_fork = dlfunc(null, 'fork', 'i');
    return (dl_fork == null || ! dl_fork) ? -1 : int(dl_fork());
}

function setsid()
{
    var dl_setsid = dlfunc(null, 'setsid', 'i');
    return (dl_setsid == null || ! dl_setsid) ? -1 : int(dl_setsid());
}

function close(int handle)
{
    var dl_close = dlfunc(null, 'close', 'ii');
    return (dl_close == null || ! dl_close) ? -1 : int(dl_close(handle));
}

//**********************************************************************

const float PI = 3.1415926;
const float ToRad = PI / 180.0;

$include_const 'opengl_defines.pasm';

//**********************************************************************

class Thing
{
    var r;
    var g;
    var b;
    var x;
    var z;
    var height;
    var width;
    function Thing(float r, float g, float b,
            float x, float z, float height, float width [optional])
    {
        self.r = r;
        self.g = g;
        self.b = b;
        self.x = x;
        self.z = z;
        self.height = height;
        if (width == 0.0)
            width = 1.0;
        self.width = width / 2.0;
    }
    function draw()
    {
        float r = self.r;
        float g = self.g;
        float b = self.b;
        float x = self.x;
        float z = self.z;
        float height = self.height;
        float width = self.width;
        float f;
        glPushMatrix();
        glColor3f(r, g, b);

        if (0) {
            glTranslatef(x, height / 2.0, x);
            glScalef(1.0, height, 1.0);
            glutSolidCube(1.0);
        }
        else {
            glTranslatef(x, 0.0, z);

            glBegin(GL_QUADS);

            glVertex3f( width, height,  width);
            glVertex3f( width, height, -width);
            glVertex3f(-width, height, -width);
            glVertex3f(-width, height,  width);

            f = 0.7;
            glColor3f(r * f, g * f, b * f);
            glVertex3f( width, 0.0,    -width);
            glVertex3f( width, height, -width);
            glVertex3f( width, height,  width);
            glVertex3f( width, 0.0,     width);

            f = 0.6;
            glColor3f(r * f, g * f, b * f);
            glVertex3f(-width, 0.0,     width);
            glVertex3f(-width, height,  width);
            glVertex3f(-width, height, -width);
            glVertex3f(-width, 0.0,    -width);

            f = 0.3;
            glColor3f(r * f, g * f, b * f);
            glVertex3f(-width, 0.0,    -width);
            glVertex3f(-width, height, -width);
            glVertex3f( width, height, -width);
            glVertex3f( width, 0.0,    -width);

            f = 0.4;
            glColor3f(r * f, g * f, b * f);
            glVertex3f( width, 0.0,     width);
            glVertex3f( width, height,  width);
            glVertex3f(-width, height,  width);
            glVertex3f(-width, 0.0,     width);

            glEnd();
        }

        glPopMatrix();
    }
}

//**********************************************************************

function train(float angle, float dis, float fuzz)
{
    glPushMatrix();

    float dismod = dis + 3.0 * sin(angle * 4.0) + 7.0 * sin(angle * 8.0);
    // Central position
    float xt = sin(angle) * dismod;
    float zt = cos(angle) * dismod;
    glTranslatef(xt, 0.0, zt);

    // Approximate the tangent
    const float delta = 0.0001;
    float angle1 = angle + delta;
    float dismod1 = dis + 3.0 * sin(angle1 * 4.0) + 7.0 * sin(angle1 * 8.0);
    float xt1 = sin(angle1) * dismod1;
    float zt1 = cos(angle1) * dismod1;
    float angle2 = angle - delta;
    float dismod2 = dis + 3.0 * sin(angle2 * 4.0) + 7.0 * sin(angle2 * 8.0);
    float xt2 = sin(angle2) * dismod2;
    float zt2 = cos(angle2) * dismod2;
    glRotatef((atan(xt1 - xt2, zt1 - zt2)) / ToRad + 90.0, 0.0, 1.0, 0.0);

    // Cheat a bit: change the wagon length instead of adjusting its
    // angular position
    const float halfangle = 0.0278;
    float anglea = angle + halfangle;
    float dismoda = dis + 3.0 * sin(anglea * 4.0) + 7.0 * sin(anglea * 8.0);
    float xa = sin(anglea) * dismoda;
    float za = cos(anglea) * dismoda;
    float lena = sqrt((xt-xa)*(xt-xa) + (zt-za)*(zt-za));

    float angleb = angle - halfangle;
    float dismodb = dis + 3.0 * sin(angleb * 4.0) + 7.0 * sin(angleb * 8.0);
    float xb = sin(angleb) * dismoda;
    float zb = cos(angleb) * dismoda;
    float lenb = - sqrt((xt-xb)*(xt-xb) + (zt-zb)*(zt-zb));

    const float height = 1.2);
    const float width = 0.8;

    glColor3f(1.0, 1.0, fuzz);
    glBegin(GL_QUAD_STRIP);
    glVertex3f(lena, height, -width / 2);
    glVertex3f(lenb, height, -width / 2);
    glVertex3f(lena, height,  width / 2);
    glVertex3f(lenb, height,  width / 2);
    glEnd();

    glColor3f(0.7, 0.7, fuzz * 0.7);
    glBegin(GL_QUAD_STRIP);
    glVertex3f(lena, height,  width / 2);
    glVertex3f(lenb, height,  width / 2);
    glVertex3f(lena, 0.0,     width / 2);
    glVertex3f(lenb, 0.0,     width / 2);
    glEnd();

    glColor3f(0.8, 0.8, fuzz * 0.8);
    glBegin(GL_QUAD_STRIP);
    glVertex3f(lena, 0.0,    -width / 2);
    glVertex3f(lenb, 0.0,    -width / 2);
    glVertex3f(lena, height, -width / 2);
    glVertex3f(lenb, height, -width / 2);
    glEnd();

    glColor3f(0.6, 0.6, fuzz *0.6);
    glBegin(GL_QUADS);
    glVertex3f(lena, height, -width / 2);
    glVertex3f(lena, height,  width / 2);
    glVertex3f(lena, 0.0,     width / 2);
    glVertex3f(lena, 0.0,     -width / 2);

    glColor3f(0.5, 0.5, fuzz *0.5);
    glVertex3f(lenb, 0.0,    -width / 2);
    glVertex3f(lenb, 0.0,     width / 2);
    glVertex3f(lenb, height,  width / 2);
    glVertex3f(lenb, height, -width / 2);

    glEnd();

    glPopMatrix();
}

function village(var things, int posi, int posj, float r, float g, float b)
{
    for (int i = 0; i < 11; ++i)
        for (int j = 0; j < 11; ++j)
            if (i != j && i != 10 - j) {
                // Arbitrary color change for more variety
                float fuzzr = (1-sin(sin(i*i*87)*0.7 + cos(j*j*j*115))/2) * 0.2;
                float fuzzg = (1-sin(sin(i*i*70) + cos(j*j*j*93)*0.8)/2) * 0.2;
                float fuzzb = (1-sin(sin(i*i*103)*0.9 + cos(j*j*j*79))/2) * 0.2;
                things.push(new Thing(r-r*fuzzr, g-g*fuzzg, b-b*fuzzb, float(i*2 + posi), float(j*2 + posj), 4.0));
            }
}

class Fly
{
    var w;
    var aspect;
    var savecb;
    var things;

    var auto;
    var moveup;
    var movedown;
    var moveleft;
    var moveright;

    var posx;
    var posy;
    var posz;

    var dx;
    var dy;
    var dz;

    var speed;
    var prev;

    function Fly(string title)
    {
        self.w = int(glutCreateWindow(title));
        self.aspect = 1.0;

        self.auto = 1;
        self.moveup = false;
        self.movedown = false;
        self.moveleft = false;
        self.moveright = false;

        self.posx =  60.0;
        self.posy =  10.0;
        self.posz = -10.0;

        self.dx  = -1.0;
        self.dy  =  0.0;
        self.dz  =  0.0;

        self.speed = 25.0;

        var things = [];
        things.push(new Thing(0.0, 0.8, 0.2, 4.0, 4.0, 1.0));
        things.push(new Thing(0.0, 1.0, 0.0, -1.0, -3.0, 1.0));
        things.push(new Thing(1.0, 0.2, 0.2, -2.0, -3.0, 10.0));
        things.push(new Thing(0.8, 1.0, 0.8, -2.0, 5.0, 1.0));
        things.push(new Thing(0.4, 1.0, 0.4, 3.0, 3.0, 12.0));

        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 9.0, 12.0));
        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 8.0, 11.0));
        things.push(new Thing(0.0, 0.0, 1.0, 9.0, 7.0, 10.0));

        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -10.0, 14.0));
        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -11.0, 14.0));
        things.push(new Thing(0.0, 0.0, 1.0, 0.0, -12.0, 14.0));

        things.push(new Thing(1.0, 1.0, 0.0, 20.0, 20.0, 30.0));

        things.push(new Thing(1.0, 0.0, 0.0, -120.0,  120.0, 20.0, 5.0));
        things.push(new Thing(0.0, 1.0, 0.0, -120.0, -120.0, 20.0, 5.0));
        things.push(new Thing(0.0, 0.0, 1.0,  120.0, -120.0, 20.0, 5.0));
        things.push(new Thing(1.0, 0.0, 1.0,  120.0,  120.0, 20.0, 5.0));

        village(things, -70, -80, 0.4, 1.0, 0.4);
        village(things,  90, 110, 1.0, 0.8, 0.4);
        village(things,  30, 150, 0.4, 0.4, 0.7);

        const float r = 1.0; const float g = 0.8; const float b = 0.7;
        const float dis = 178.9;
        const float pheight = 2.1;
        const float pwidth = 0.18;
        for (int i = 0;  i < 360; i+=8) {
            float angle = float(i) * ToRad;
            float dismod = dis + 3.0 * sin(angle * 4.0) + 7.0 * sin(angle * 8.0);
            float xi = dismod * sin(angle);
            float zi = dismod * cos(angle);
            things.push(new Thing(r, g, b, xi, zi, pheight, pwidth));
            dismod += 4.2;
            xi = dismod * sin(angle);
            zi = dismod * cos(angle);
            things.push(new Thing(r, g, b, xi, zi, pheight, pwidth));
        }

        self.things = things;

        float prev = floattime();
        self.prev = prev;
        // Inititalize postion for automatic mode, draw can be called
        // before the first timer pulse.
        self.timer(0);

        var savecb = [];
        self.savecb = savecb;

        var keyboardfunc = function (int key, int x, int y)
            {
                self.keyboard(key, x, y);
            };
        savecb.push(keyboardfunc);
        glutKeyboardFunc(keyboardfunc);

        var specialkeyfunc = function (int key, int x, int y)
            {
                self.specialKey(key, x, y);
            };
        savecb.push(specialkeyfunc);
        glutSpecialFunc(specialkeyfunc);

        var specialkeyupfun = function (int key, int x, int y)
            {
                self.specialKeyUp(key, x, y);
            };
        savecb.push(specialkeyupfun);
        glutSpecialUpFunc(specialkeyupfun);

        var reshapefunc = function(int width, int height)
            {
                self.reshape(width, height);
            };
        savecb.push(reshapefunc);
        glutReshapeFunc(reshapefunc);

        var drawfunc = function()
            {
                self.draw();
            };
        savecb.push(drawfunc);
        glutDisplayFunc(drawfunc);


        var funtimer = function(int value)
            {
                self.timer(value);
                glutTimerFunc(funtimer, 40, 0);
            };
        savecb.push(funtimer);
        glutTimerFunc(funtimer, 40, 0);
    }

    function reshape(int w, int h)
    {
        float aspect = w;
        aspect = aspect / h;
        self.aspect =: aspect;
        glViewport(0, 0, w, h);
    }

    function draw()
    {
        int buffers = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT;
        glClearColor(0.8, 0.9, 1.0, 1.0);
        glClear(buffers);

        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        gluPerspective(60.0, self.aspect, 0.1, 1000.0);

        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();

        float x = self.posx;
        float y = self.posy;
        float z = self.posz;
        float dx = self.dx;
        float dy = self.dy;
        float dz = self.dz;
        gluLookAt(
             x, y, z,
             x + dx, y + dy, z + dz,
             0.0, 0.2, 0.0);

        glPushMatrix();
        if (y < 0.0)
            glCullFace(GL_FRONT);
        float length = 200.0;
        glColor3f(0.4, 0.4, 0.4);
        glBegin(GL_QUADS);
        glVertex3f( length,  0.0,  length);
        glVertex3f( length,  0.0, -length);
        glVertex3f(-length,  0.0, -length);
        glVertex3f(-length,  0.0,  length);
        glEnd();
        if (y < 0.0)
            glCullFace(GL_BACK);
        glPopMatrix();

        const float angle = -67.0 * ToRad;
        const float rangle = angle + 90.0 * ToRad;
        const float inix =  189.5;
        const float iniz =  -81.5;
        const int nsteps = 7;
        int steps[nsteps]     = [   3,   3,   3,   4,    3,    3,    3 ];
        float heights[nsteps] = [ 0.2, 0.4, 0.3, 0.0, -0.3, -0.4, -0.2 ];
        float stepx = sin(angle)  * 2.0;
        float stepz = cos(angle)  * 2.0;

        glCullFace(GL_FRONT);
        glColor3f(0.6, 0.6, 0.6);

        for (int face = 0; face < 2; ++face) {
            for (int r = 0; r < 2; ++r) {
                float xpos1 = inix + sin(rangle) * 5.5 * r;
                float zpos1 = iniz + cos(rangle) * 5.5 * r;
                float xpos2 = xpos1 + sin(rangle)  * 4.0;
                float zpos2 = zpos1 + cos(rangle) * 4.0;
                float ypos = 0.1;

                glBegin(GL_QUAD_STRIP);
                glVertex3f(xpos1, ypos, zpos1);
                glVertex3f(xpos2, ypos, zpos2);
                for (int s = 0; s < nsteps; ++s) {
                    int ss = steps[s];
                    float sx = stepx * ss;
                    float sz = stepz * ss;
                    float sy = heights[s] * ss;
                    xpos1 += sx;
                    xpos2 += sx;
                    zpos1 += sz;
                    zpos2 += sz;
                    ypos += sy;
                    glVertex3f(xpos1, ypos, zpos1);
                    glVertex3f(xpos2, ypos, zpos2);
                }
                glEnd();
            }
            glColor3f(0.2, 0.2, 0.3);
            glCullFace(GL_BACK);
        }

        for (var thing in self.things)
            thing.draw();

        float now = self.prev;
        float t = now / 7.2;
        int i;
        float fuzz[] = [ 0.0, 0.4, 0.5, 0.3, 0.4, 0.0, 0.3, 0.5, 0.4, 0.3, 0.2 ];
        for (i = 0; i < 11; ++i) {
            train(t, 180.0, fuzz[i]);
            t += 0.058;
        }
        t = - now / 6.8;
        for (i = 0; i < 8; ++i) {
            train(t, 182.0, fuzz[i]);
            t -= 0.058;
        }

        glutSwapBuffers();
        ${ sweep 1 };
    }

    function timer(int ignored)
    {
        const float down = 0.2;
        if (self.w == null)
            return;

        float x; float y; float z;
        float dx; float dy; float dz;
        float prev = self.prev;
        float angle;
        float now = floattime();
        float diff;
        float dis;
        switch (self.auto) {
          case 1:
            dis = 175.4;
            diff = (now - 1.2) / 7.2;
            x = sin(diff) * dis;
            z = cos(diff) * dis;
            y = 16.0 + 11.0 * cos(now / 8.5);
            diff += 0.2;
            dx = sin(diff + PI / 2.0) * cos(down);
            dy = -sin(down);
            dz = cos(diff + PI / 2.0) * cos(down);
            self.dx =: dx;
            self.dy =: dy;
            self.dz =: dz;
            break;
          case 2:
            dis = 186.0;
            diff = - (now - 1.0) / 6.8;
            x = sin(diff) * dis;
            z = cos(diff) * dis;
            y = 16.0 + 11.0 * cos(now / 8.5);
            diff -= 0.3;
            dx = sin(diff - PI / 2.0) * cos(down);
            dy = -sin(down);
            dz = cos(diff - PI / 2.0) * cos(down);
            self.dx =: dx;
            self.dy =: dy;
            self.dz =: dz;
            break;
          case 3:
            dis = 180.3;
            diff = now / 7.2 + 0.012;
            float dismod = dis + 3.0 * sin(diff * 4.0) + 7.0 * sin(diff * 8.0);
            // Shake a bit horizontally and vertically to improve the
            // illusion of being mounted on a train.
            // Use different periods, each a non integer multiple of the time,
            // to add variety.
            dismod += sin(diff * 30.43) * 0.02;
            y = 1.8 + pow(sin(diff * 20.27), 2) * 0.014;;
            x = sin(diff) * dismod;
            z = cos(diff) * dismod;
            float angle1 = diff + 0.01;
            float dismod1 = dis + 3.0 * sin(angle1 * 4.0) + 7.0 * sin(angle1 * 8.0);
            float xt1 = sin(angle1) * dismod1;
            float zt1 = cos(angle1) * dismod1;
            dx = xt1 - x;
            dz = zt1 - z;
            dy = 0;
            self.dx =: dx;
            self.dy =: dy;
            self.dz =: dz;
            break;
          default:
            x = self.posx;
            y = self.posy;
            z = self.posz;
            dx = self.dx;
            dy = self.dy;
            dz = self.dz;
            if (self.moveup) {
                angle = asin(dy) - 0.02;
                dy = sin(angle);
                self.dy =: dy;
            }
            if (self.movedown) {
                angle = asin(dy) + 0.02;
                dy = sin(angle);
                self.dy =: dy;
            }
            if (self.moveleft) {
                angle = atan(dx, dz) + 0.02;
                dx = sin(angle);
                dz = cos(angle);
                self.dx =: dx;
                self.dz =: dz;
            }
            if (self.moveright) {
                angle = atan(dx, dz) - 0.02;
                dx = sin(angle);
                dz = cos(angle);
                self.dx =: dx;
                self.dz =: dz;
            }

            diff = (now - prev) * float(self.speed);
            //cry(diff);

            x += dx * diff;
            y += dy * diff;
            z += dz * diff;
        }
        self.prev =: now;
        self.posx =: x;
        self.posy =: y;
        self.posz =: z;
        glutPostRedisplay();
    }

    function keyboard(int key, int x, int y)
    {
        float speed = self.speed;
        const float minspeed = 0.1;
        switch (key) {
          case ord("\e"):
            glutDestroyWindow(self.w);
            self.w = null;
            break;
          case ord("+"):
            if (speed >= minspeed)
                speed *= 1.1;
            else if (speed >= 0.0)
                speed = minspeed;
            else if (speed >= -minspeed)
                speed = 0.0;
            else
                speed *= 0.9;
            self.speed =: speed;
            break;
          case ord("-"):
            if (speed <= -minspeed)
                speed *= 1.1;
            else if (speed <= 0.0)
                speed = -minspeed;
            else if (speed <= minspeed)
                speed = 0.0;
            else
                speed *= 0.9;
            self.speed =: speed;
            break;
          case ord('s'):
            self.dy =: 0.0;
            break;
          case ord('p'):
            self.auto =: 0;
            self.speed =: 0.0001;
            break;
          case ord("\t"):
            self.speed =: 25.0;
            var auto = self.auto;
            switch (auto) {
              case 1:
                auto =: 2; break;
              case 2:
                auto =: 3; break;
              case 3:
                auto =: 1; break;
              default:
                auto =: 1;
            }
            break;
        }
    }
    function specialKey(int key, int x, int y)
    {
        if (self.auto)
            self.auto =: 0;

        switch (key) {
          case GLUT_KEY_LEFT:
            self.moveleft =: true;
            break;
          case GLUT_KEY_RIGHT:
            self.moveright =: true;
            break;
          case GLUT_KEY_DOWN:
            self.movedown =: true;
            break;
          case GLUT_KEY_UP:
            self.moveup =: true;
            break;
        }

        glutPostRedisplay();
    }
    function specialKeyUp(int key, int x, int y)
    {
        switch (key) {
          case GLUT_KEY_UP:
            self.moveup =: false;
            break;
          case GLUT_KEY_DOWN:
            self.movedown =: false;
            break;
          case GLUT_KEY_LEFT:
            self.moveleft =: false;
            break;
          case GLUT_KEY_RIGHT:
            self.moveright =: false;
            break;
        }
    }
}

//**********************************************************************

function main(var argv)
{
    if (argv[1] == '--detach') {
        // Detach from the controlling terminal, where available
        switch (fork()) {
          case -1: // fork failed
            ; // Do nothing, continue as foreground process
          case 0: // child
            close(0);
            close(1);
            close(2);
            setsid();
            break;
          default: // parent
            return; // Finished, the children will take care
        }
    }

    using extern OpenGL;
    using OpenGL._export_all_functions;
    _export_all_functions();
    using extern NCI.Utils;
    using NCI.Utils.call_toolkit_init;
    using OpenGL.glutInit;
    call_toolkit_init(glutInit, argv);

    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);

    var f = new Fly('Fly - winxed');

    glutIgnoreKeyRepeat(1);
    glCullFace(GL_BACK);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
    glEnable(GL_MULTISAMPLE);

    glutMainLoop();
}

// End
